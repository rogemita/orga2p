%define REMAINDER	[ebp - 4]
%define MASK_HI		[ebp - 8]
%define MASK_LO		[ebp - 12]
%define	STEP_X		6
%define	STEP_Y		6
%define RESERVED_BYTES	12

;========================
; MACRO obtenerBajo
;========================
; Recupera la parte alta de un dato empaquetado a byte
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	registro3
;	offset		indica si debe desplazar el dato original
;========================
%macro obtenerBajo 2-3 0
	movq		%1, %2		;copio el dato
%if %3 != 0
	psrlq		%1, %3		;desplazo dos columnas
%endif
	punpcklbw	%1, %1		;desempaqueto la parte baja
	psllw		%1, 8		;retiro el excedente alto
	psrlw		%1, 8
%endmacro

%macro obtenerAlto 2-3 0
	movq		%1, %2		;copio el dato
%if %3 != 0
	psrlq		%1, %3		;desplazo dos columnas
%endif
	punpckhbw	%1, %1		;desempaqueto la parte baja
	psllw		%1, 8		;retiro el excedente alto
	psrlw		%1, 8
%endmacro      

;========================
; MACRO sobelPrewittX
;========================
; Cuerpo de codigo que aplica los operadores de Sobel y Prewitt en el orden x
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	registro3
;	duplica?	debe duplicar el valor del primer registro?
;	procesaAmbos	indica si debe procesar el dato bajo y el alto
;========================
%macro	sobelPrewittX 4-5 0
	;**************************
	; VOY A APLICAR EL OPERADOR
	; EN LA PARTE BAJA
	;**************************
	obtenerBajo	mm6, %2, 16	;obtengo los bajos de la segunda fila
%if %4 = 0
	psllw		mm6, 1		;multiplico por dos
%endif
	obtenerBajo	mm7, %1, 16	;obtengo los bajos de la primera fila
	paddusw		mm6, mm7	;sumo saturado
	obtenerBajo	mm7, %3, 16	;obtengo los bajos de la tercera fila
	paddusw		mm6, mm7	;sumo saturado

	obtenerBajo	mm7, %2		;obtengo los bajos de la segunda fila
%if %4 = 0
	psllw		mm7, 1		;multiplico por dos
%endif
	psubusw		mm6, mm7
	obtenerBajo	mm7, %1		;obtengo los bajos de la primera fila
	psubusw		mm6, mm7	;sumo saturado
	obtenerBajo	mm7, %3		;obtengo los bajos de la tercera fila
	psubusw		mm6, mm7	;sumo saturado

	;************************
	; TERMINE COPIO A DESTINO
	;************************
	packuswb	mm6, mm6
	movd		[eax], mm6	;copio los 4 bytes al destino
	
%if %5 = 0
	add		eax, 4	;salto la linea siguiente
	
	;**************************
	; VOY A APLICAR EL OPERADOR
	; EN LA PARTE ALTA
	;**************************	
	obtenerAlto	mm6, %2, 16	;obtengo los bajos de la segunda fila
%if %4 = 0
	psllw		mm6, 1		;multiplico por dos
%endif
	obtenerAlto	mm7, %1, 16	;obtengo los bajos de la primera fila
	paddusw		mm6, mm7	;sumo saturado
	obtenerAlto	mm7, %3, 16	;obtengo los bajos de la tercera fila
	paddusw		mm6, mm7	;sumo saturado

	obtenerAlto	mm7, %2		;obtengo los bajos de la segunda fila
%if %4 = 0
	psllw		mm7, 1		;multiplico por dos
%endif
	psubusw		mm6, mm7
	obtenerAlto	mm7, %1		;obtengo los bajos de la primera fila
	psubusw		mm6, mm7	;sumo saturado
	obtenerAlto	mm7, %3		;obtengo los bajos de la tercera fila
	psubusw		mm6, mm7	;sumo saturado

	;************************
	; TERMINE COPIO A DESTINO
	;************************
	packuswb	mm6, mm6
	movd		[eax], mm6	;copio los 4 bytes al destino de los cuales 2 son validos
	sub		eax, 4
%endif
	add		eax, edx	;salto la linea siguiente
%endmacro

;========================
; MACRO sobelPrewittY
;========================
; Cuerpo de codigo que aplica los operadores de Sobel y Prewitt en el orden x
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	duplica?	debe duplicar el valor del primer registro?
;	procesaAmbos	indica si debe procesar el dato bajo y el alto
;========================
%macro	sobelPrewittY 2-3 0
	;**********************
	; PROCESO PIXEL 2,4,6,8
	;**********************
	movq	mm5, %1			;cargo el primer registro y enmascaro para pasar a word
	pand	mm5, mm7
	movq	mm6, %1			;cargo y me quedo con el pixel una a derecha
	psllq	mm6, 8
	pand	mm6, mm7
%if %3 = 0
	psllw	mm6, 1			;multiplico por dos
%endif
	paddusw	mm5, mm6		;sumo el segundo pixel
	movq	mm6, %1
	psllq	mm6, 16			;cargo y me quedo con el pixel dos a derecha
	pand	mm6, mm7
	paddusw	mm5, mm6		; ya tengo acumulado en mm5 la parte positiva de los pixeles, 2, 4, 6, 8

	movq	mm6, %2
	pand	mm6, mm7
	psubusw	mm5, mm6
	movq	mm6, %2
	psllq	mm6, 8
	pand	mm6, mm7
%if %3 = 0
	psllw	mm6, 1			;multiplico por dos
%endif	
	psubusw	mm5, mm6
	movq	mm6, %2
	psllq	mm6, 16			;cargo y me quedo con el pixel dos a derecha
	pand	mm6, mm7
	psubusw	mm5, mm6		; ya el operador aplicado en mm5 a los pixeles, 2, 4, 6, 8
	pxor	mm6, mm6
	packuswb	mm5, mm6
	punpcklbw	mm5, mm6	;saturo los pixeles
	por	mm5, [eax]
	movq	[eax], mm5		;copio los pixeles

	;**********************
	; PROCESO PIXEL 1,3,5
	;**********************
	movq	mm5, %1			;cargo el primer registro y enmascaro para pasar a word
	psrlq	mm5, 8
	pand	mm5, mm7
	movq	mm6, %1			;cargo y me quedo con el pixel una a derecha
	pand	mm6, mm7
%if %3 = 0
	psllw	mm6, 1			;multiplico por dos
%endif
	paddusw	mm5, mm6		;sumo el segundo pixel
	movq	mm6, %1
	psllq	mm6, 8			;cargo y me quedo con el pixel dos a derecha
	pand	mm6, mm7
	paddusw	mm5, mm6		; ya tengo acumulado en mm5 la parte positiva de los pixeles, 1, 3, 5

	movq	mm6, %2
	psrlq	mm6, 8
	pand	mm6, mm7
	psubusw	mm5, mm6
	movq	mm6, %2
	pand	mm6, mm7
%if %3 = 0
	psllw	mm6, 1			;multiplico por dos
%endif	
	psubusw	mm5, mm6
	movq	mm6, %2
	psllq	mm6, 8			;cargo y me quedo con el pixel dos a derecha
	pand	mm6, mm7
	psubusw	mm5, mm6		; ya el operador aplicado en mm5 a los pixeles, 2, 4, 6, 8

	pxor	mm6, mm6
	packuswb	mm5, mm6
	punpcklbw	mm5, mm6	;saturo los pixeles
	psllq	mm5, 8
	por	mm5, [eax]
	movq	[eax], mm5		;copio los pixeles

	add		eax, edx	;salto la linea siguiente
%endmacro


;========================
; MACRO sobelPrewitt
;========================
; Cuerpo de codigo que aplica los operadores de Sobel y Prewitt
; Entrada:
;	esSobel		marca si es sobel o no
;========================
%macro sobelPrewitt 1
	doEnter RESERVED_BYTES


	xor	edx, edx
	mov	eax, SRC
	mov	eax, [eax + WIDTH_STEP]
	mov	ebx, STEP_X
	div	ebx
	mov	REMAINDER, edx		;consigo el resto del ancho respecto de 6

	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]
	
	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]

	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura
	
	mov	eax, XORDER

	cmp	eax, 0
	jne	%%procesaX	
	jmp	%%preProcesaY
%%procesaX:

%%cicloSX_y:
	xor	ecx, ecx
%%cicloSX_x:
 	pxor	mm6, mm6		;limpio A
	pxor	mm7, mm7		;limpio B

	xor	eax, eax		;offset de linea

	movq	mm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movq	mm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm5, [edi + eax]		
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	sobelPrewittX mm0, mm1, mm2, %1
	sobelPrewittX mm1, mm2, mm3, %1
	sobelPrewittX mm2, mm3, mm4, %1
	sobelPrewittX mm3, mm4, mm5, %1

	add 	esi, STEP_X		
	add	edi, STEP_X
	add	ecx, STEP_X

	cmp	ecx, edx
	jl	%%cicloSX_x

	cmp	ebx, 4
	jg	%%procesaSX
	jmp	%%noProcesaSX
%%procesaSX:

	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	sub	esi, 2
	sub	edi, 2

	xor	eax, eax		;offset de linea

	movq	mm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movq	mm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm5, [edi + eax]

	mov	eax, esi

	sobelPrewittX mm0, mm1, mm2, %1, 1
	sobelPrewittX mm1, mm2, mm3, %1, 1
	sobelPrewittX mm2, mm3, mm4, %1, 1
	sobelPrewittX mm3, mm4, mm5, %1, 1

	add	esi, 2
	add	edi, 2

%%noProcesaSX:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 4		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSX_y		

%%preProcesaY:

	mov	eax, YORDER
	cmp	eax, 0
	jne	%%procesaY	
	jmp	%%fin


%%procesaY:
	xor	edx, edx
	mov	eax, SRC
	mov	eax, [eax + WIDTH_STEP]
	mov	ebx, STEP_Y
	div	ebx
	mov	REMAINDER, edx		;consigo el resto del ancho respecto de 6

	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]

	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]
	
	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura

	pxor	mm7, mm7		;limpio B
	mov	dword MASK_LO, 0x00FF0000	;OJO ACA que estoy borrando este byte por el tema del or a destino para no procesar basura
	mov	dword MASK_HI, 0x00FF00FF

%%cicloSY_y:
	xor	ecx, ecx
%%cicloSY_x:
	movq	mm7, MASK_LO

	xor	eax, eax		;offset de linea

	movq	mm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movq	mm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm4, [edi + eax]		
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	sobelPrewittY mm2, mm0, %1
	sobelPrewittY mm3, mm1, %1
	sobelPrewittY mm4, mm2, %1

	add 	esi, STEP_Y		
	add	edi, STEP_Y
	add	ecx, STEP_Y

	cmp	ecx, edx
	jl	%%cicloSY_x

	cmp	ebx, 3
	jg	%%procesaSY
	jmp	%%noProcesaSY
%%procesaSY:


	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	sub	esi, 2
	sub	edi, 2

	xor	eax, eax		;offset de linea

	movq	mm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movq	mm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movq	mm4, [edi + eax]		
		
	mov	eax, esi

	sobelPrewittY mm2, mm0, %1
	sobelPrewittY mm3, mm1, %1
	sobelPrewittY mm4, mm2, %1

	add	esi, 2
	add	edi, 2

%%noProcesaSY:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 3		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSY_y		

%%fin:
	doLeave RESERVED_BYTES, 1
%endmacro