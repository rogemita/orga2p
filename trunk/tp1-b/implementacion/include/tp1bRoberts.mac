%define REMAINDER	[ebp - 4]
%define	STEP_X		15		
%define RESERVED_BYTES	0


;========================
; MACRO robertsXY
;========================
; Cuerpo de codigo que aplica el operador de Roberts en el orden x o y
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	esX?
;========================
%macro	robertsXY 3
	;procesamos la parte baja
	movdqu		xmm7, %2
	movdqu		xmm6, %1
%if %3 = 0
	psrldq		xmm6, 1		;desplazo para hacer la aritmetica
%else
	psrldq		xmm7, 1
%endif
	punpcklbw	xmm7, xmm7
	psllw		xmm7, 8		;limpio la parte alta del word
	psrlw		xmm7, 8
	punpcklbw	xmm6, xmm6
	psllw		xmm6, 8		;limpio la parte alta del word
	psrlw		xmm6, 8
	psubusw		xmm6, xmm7

	packuswb	xmm6, xmm6
	
	movdqu		xmm7, [eax]
	por		xmm6, xmm7
	movq		[eax], xmm6	;copio los 4 bytes al destino
	
	add		eax, 8		;paso a los proximos cuatro bytes

	;procesamos la parte alta
	movdqu		xmm7, %2
	movdqu		xmm6, %1
%if %3 = 0
	psrldq		xmm6, 1
%else
	psrldq		xmm7, 1
%endif
	punpckhbw	xmm7, xmm7
	psllw		xmm7, 8
	psrlw		xmm7, 8
	punpckhbw	xmm6, xmm6
	psllw		xmm6, 8
	psrlw		xmm6, 8
	psubusw		xmm6, xmm7

	packuswb	xmm6, xmm6
 	psllq		xmm6, 8		;limpio el byte m√°s alto pues no tiene dato valido
 	psrlq		xmm6, 8

	movdqu		xmm7, [eax]
	por		xmm6, xmm7
	movq		[eax], xmm6	;copio los 4 bytes al destino
	sub		eax, 8
	add		eax, edx	;salto la linea siguiente
%endmacro


;========================
; MACRO robertsX
;========================
; Cuerpo de codigo que aplica el operador de Roberts en el orden x
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;========================
%macro	robertsX 2
	robertsXY %1, %2, 0
%endmacro

;========================
; MACRO robertsY
;========================
; Cuerpo de codigo que aplica el operador de Roberts en el orden x
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;========================
%macro	robertsY 2
	robertsXY %1, %2, 1
%endmacro

;========================
; MACRO roberts
;========================
; Cuerpo de codigo que aplica el operador de Roberts
;========================
%macro roberts 0
	doEnter RESERVED_BYTES


	xor	edx, edx
	mov	eax, SRC
	mov	eax, [eax + WIDTH_STEP]
	mov	ebx, STEP_X
	div	ebx
	mov	REMAINDER, edx		;consigo el resto del ancho respecto de 6

	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]
	
	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]

	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura
	
	mov	eax, XORDER

	cmp	eax, 0
	jne	%%procesaX	
	jmp	%%preProcesaY
%%procesaX:

%%cicloSX_y:
	xor	ecx, ecx
%%cicloSX_x:
	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]		
	add	eax, edx		;salto una linea
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	robertsX xmm0, xmm1
	robertsX xmm1, xmm2
	robertsX xmm2, xmm3
	robertsX xmm3, xmm4
	robertsX xmm4, xmm5


	add 	esi, STEP_X		
	add	edi, STEP_X
	add	ecx, STEP_X

	cmp	ecx, edx
	jl	%%cicloSX_x

	cmp	ebx, 5
	jg	%%procesaSX
	jmp	%%noProcesaSX
%%procesaSX:

	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	dec	esi
	dec	edi

	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]		

	mov	eax, esi

	robertsX xmm0, xmm1
	robertsX xmm1, xmm2
	robertsX xmm2, xmm3
	robertsX xmm3, xmm4
	robertsX xmm4, xmm5

	inc	esi
	inc	edi

%%noProcesaSX:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 5		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSX_y		

%%preProcesaY:
	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]
	
	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]

	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura

	mov	eax, YORDER
	cmp	eax, 0
	jne	%%procesaY	
	jmp	%%fin


%%procesaY:
%%cicloSY_y:
	xor	ecx, ecx
%%cicloSY_x:
	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]		
	add	eax, edx		;salto una linea
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	robertsY xmm0, xmm1
	robertsY xmm1, xmm2
	robertsY xmm2, xmm3
	robertsY xmm3, xmm4
	robertsY xmm4, xmm5


	add 	esi, STEP_X		
	add	edi, STEP_X
	add	ecx, STEP_X

	cmp	ecx, edx
	jl	%%cicloSY_x

	cmp	ebx, 5
	jg	%%procesaSY
	jmp	%%noProcesaSY
%%procesaSY:

	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	dec	esi
	dec	edi

	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]		

	mov	eax, esi

	robertsY xmm0, xmm1
	robertsY xmm1, xmm2
	robertsY xmm2, xmm3
	robertsY xmm3, xmm4
	robertsY xmm4, xmm5

	inc	esi
	inc	edi

%%noProcesaSY:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 5		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSY_y		


%%fin:
	doLeave RESERVED_BYTES, 1
%endmacro