%define REMAINDER	[ebp - 4]
%define	STEP_X		14
%define	STEP_Y		14
%define RESERVED_BYTES	4

;========================
; MACRO obtenerBajo
;========================
; Recupera la parte alta de un dato empaquetado a byte
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	registro3
;	offset		indica si debe desplazar el dato original
;========================
%macro obtenerBajo 2-3 0
	movdqu		%1, %2		;copio el dato
%if %3 != 0
	psrldq		%1, %3		;desplazo dos columnas
%endif
	punpcklbw	%1, %1		;desempaqueto la parte baja
	psllw		%1, 8		;retiro el excedente alto
	psrlw		%1, 8
	cvtdq2ps	%1, %1		;convierto a precision simple
%endmacro

%macro obtenerAlto 2-3 0
	movdqu		%1, %2		;copio el dato
%if %3 != 0
	psrldq		%1, %3		;desplazo dos columnas
%endif
	punpckhbw	%1, %1		;desempaqueto la parte baja
	psllw		%1, 8		;retiro el excedente alto
	psrlw		%1, 8
	cvtdq2ps	%1, %1		;convierto a precision simple
%endmacro      

;========================
; MACRO cargarRaiz2
;========================
; Carga raiz de dos en el registro xmm7
; Entrada:
;	registro1	registros sobre los cuales operar 
;========================
%macro cargarRaiz2 1
 	movq2dq		%1, mm7		;copio la raiz en precision doble
	pshufd		%1, %1, 0x00 	;copio el mas bajo a todos los dword
%endmacro
;========================
; MACRO freichenX
;========================
; Cuerpo de codigo que aplica el operador de freichen en el orden x
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;	registro3
;	procesaAmbos	indica si debe procesar el dato bajo y el alto
;========================
%macro	freiChenX 3-4 0
	;**************************
	; VOY A APLICAR EL OPERADOR
	; EN LA PARTE BAJA
	;**************************
	cargarRaiz2	xmm7
	obtenerBajo	xmm6, %2, 2	;obtengo los bajos de la segunda fila
	mulps		xmm6, xmm7

	obtenerBajo	xmm7, %1, 2	;obtengo los bajos de la primera fila
	addps		xmm6, xmm7	;sumo saturado
	obtenerBajo	xmm7, %3, 2	;obtengo los bajos de la tercera fila
	addps		xmm6, xmm7	;sumo saturado

	obtenerBajo	xmm7, %1	;obtengo los bajos de la primera fila
	subps		xmm6, xmm7	;sumo saturado
	obtenerBajo	xmm7, %3	;obtengo los bajos de la tercera fila
	subps		xmm6, xmm7	;sumo saturado
					;aca estoy usando un truco que es dividir todo menos un item por raiz de dos
					;sumar el item y multiplicar todo por raiz de dos, i.e: (((a+b+c-d-f)/ 2^(.5))-e*2^(.5))
	cargarRaiz2	xmm7
	divps		xmm6, xmm7
	obtenerBajo	xmm7, %2	;obtengo los bajos de la segunda fila
	psubusw		xmm6, xmm7
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7
	;************************
	; TERMINE COPIO A DESTINO
	;************************
	cvttps2dq	xmm6, xmm6
	packuswb	xmm6, xmm6
	movq		[eax], xmm6	;copio los 8 bytes al destino
%if %4 = 0
	add		eax, 8		;salto la linea siguiente
	;**************************
	; VOY A APLICAR EL OPERADOR
	; EN LA PARTE ALTA
	;**************************	
	cargarRaiz2	xmm7
	obtenerAlto	xmm6, %2, 2	;obtengo los bajos de la segunda fila
	mulps		xmm6, xmm7

	obtenerAlto	xmm7, %1, 2	;obtengo los bajos de la primera fila
	addps		xmm6, xmm7	;sumo saturado
	obtenerAlto	xmm7, %3, 2	;obtengo los bajos de la tercera fila
	addps		xmm6, xmm7	;sumo saturado

	obtenerAlto	xmm7, %1	;obtengo los bajos de la primera fila
	subps		xmm6, xmm7	;sumo saturado
	obtenerAlto	xmm7, %3	;obtengo los bajos de la tercera fila
	subps		xmm6, xmm7	;sumo saturado

					;aca estoy usando un truco que es dividir todo menos un item por raiz de dos
					;sumar el item y multiplicar todo por raiz de dos, i.e: (((a+b+c-d-f)/ 2^(.5))-e*2^(.5))
	cargarRaiz2	xmm7
	divps		xmm6, xmm7
	obtenerAlto	xmm7, %2	;obtengo los bajos de la segunda fila
	psubusw		xmm6, xmm7
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7
	;************************
	; TERMINE COPIO A DESTINO
	;************************
	cvttps2dq	xmm6, xmm6
	packuswb	xmm6, xmm6
	movq		[eax], xmm6	;copio los 8 bytes al destino
	sub		eax, 8
%endif
	add		eax, edx	;salto la linea siguiente
%endmacro

;========================
; MACRO armarMascara
;========================
; Arma la mascara para seleccionar pixeles pares o impares
; Entrada:
;	registro1	registros sobre los cuales operar 
;========================
%macro armarMascara 1
	pxor	%1, %1		;limpio B
	pcmpeqb	%1, %1		;armo la mascara, paso todo a uno
	psllw	%1, 8
	psrlw	%1, 8		;meto ceros intercalados de a byte
	psrldq	%1, 2		;paso el Ãºltimo word a cero
	pslldq	%1, 2
%endmacro
;========================
; MACRO freichenY
;========================
; Cuerpo de codigo que aplica el operador de freichen en el orden y
; Entrada:
;	registro1	registros sobre los cuales operar 
;	registro2
;========================
%macro	freiChenY 2
	;**********************
	; PROCESO PIXEL 2,4,6,8
	;**********************
	movdqu		xmm5, %1			;cargo el primer registro y enmascaro para pasar a word
	armarMascara	xmm7
	pand		xmm5, xmm7
	cvtdq2ps	xmm5, xmm5			;convierto a precision simple
	
	movdqu		xmm6, %1
	pslldq		xmm6, 2				;cargo y me quedo con el pixel dos a derecha
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6

	movdqu		xmm6, %2
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6

	movdqu		xmm6, %2
	pslldq		xmm6, 2			;cargo y me quedo con el pixel dos a derecha
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6		; ya el operador aplicado en xmm5 a los pixeles, 2, 4, 6, 8


	movdqu		xmm6, %1			;cargo y me quedo con el pixel una a derecha
	pslldq		xmm6, 1
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6			;lo mismo enmascaro y convierto a precision simple luego de desplazar
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7		
	addps		xmm5, xmm6			;multiplico por raiz de dos y acumulo

      
	movdqu		xmm6, %2
	pslldq		xmm6, 1
	armarMascara	xmm7
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7
	subps		xmm5, xmm6

	cvttps2dq	xmm5, xmm5
	pxor		xmm6, xmm6
	packuswb	xmm5, xmm6
	punpcklbw	xmm5, xmm6	;saturo los pixeles
	movdqu		xmm6, [eax]
	por		xmm5, xmm6
	movdqu		[eax], xmm5		;copio los pixeles

	;**********************
	; PROCESO PIXEL 1,3,5
	;**********************
	movdqu		xmm5, %1			;cargo el primer registro y enmascaro para pasar a word
	psrldq		xmm5, 1
	armarMascara	xmm7
	pand		xmm5, xmm7
	cvtdq2ps	xmm5, xmm5			;convierto a precision simple
	
	movdqu		xmm6, %1
	pslldq		xmm6, 1				;cargo y me quedo con el pixel dos a derecha
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6

	movdqu		xmm6, %2
	psrldq		xmm6, 1
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6

	movdqu		xmm6, %2
	pslldq		xmm6, 1
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	subps		xmm5, xmm6		; ya el operador aplicado en xmm5 a los pixeles, 2, 4, 6, 8


	movdqu		xmm6, %1			;cargo y me quedo con el pixel una a derecha
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6			;lo mismo enmascaro y convierto a precision simple luego de desplazar
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7		
	addps		xmm5, xmm6			;multiplico por raiz de dos y acumulo

      
	movdqu		xmm6, %2
	armarMascara	xmm7
	pand		xmm6, xmm7
	cvtdq2ps	xmm6, xmm6
	cargarRaiz2	xmm7
	mulps		xmm6, xmm7
	subps		xmm5, xmm6

	cvttps2dq	xmm5, xmm5
	pxor		xmm6, xmm6
	packuswb	xmm5, xmm6
	punpcklbw	xmm5, xmm6	;saturo los pixeles
	movdqu		xmm6, [eax]
	por		xmm5, xmm6
	movdqu		[eax], xmm5		;copio los pixeles

	add		eax, edx	;salto la linea siguiente
%endmacro


;========================
; MACRO freiChen
;========================
; Cuerpo de codigo que aplica el operador de FreiChen
;========================
%macro freiChen 0
	doEnter RESERVED_BYTES


	xor	edx, edx
	mov	eax, SRC
	mov	eax, [eax + WIDTH_STEP]
	mov	ebx, STEP_X
	div	ebx
	mov	REMAINDER, edx		;consigo el resto del ancho respecto de 6

	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]
	
	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]

	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura
	
	
	pcmpeqb	xmm0, xmm0
	psrld	xmm0, 31
	pslld	xmm0, 1
	cvtdq2ps	xmm0, xmm0
	sqrtps	xmm0, xmm0
	movdq2q	mm7, xmm0
	
; 	finit
; 	fld1
; 	fld1
; 	faddp
;  	fsqrt				;consigo la raiz de dos en st0

	mov	eax, XORDER

	cmp	eax, 0
	jne	%%procesaX	
	jmp	%%preProcesaY
%%procesaX:

%%cicloSX_y:
	xor	ecx, ecx
%%cicloSX_x:
 	pxor	xmm6, xmm6		;limpio A
	pxor	xmm7, xmm7		;limpio B

	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]		
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	freiChenX xmm0, xmm1, xmm2
	freiChenX xmm1, xmm2, xmm3
	freiChenX xmm2, xmm3, xmm4
	freiChenX xmm3, xmm4, xmm5


	add 	esi, STEP_X		
	add	edi, STEP_X
	add	ecx, STEP_X

	cmp	ecx, edx
	jl	%%cicloSX_x

	cmp	ebx, 4
	jg	%%procesaSX
	jmp	%%noProcesaSX
%%procesaSX:

	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	sub	esi, 2
	sub	edi, 2

	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm5, [edi + eax]

	mov	eax, esi

	freiChenX xmm0, xmm1, xmm2, 1
	freiChenX xmm1, xmm2, xmm3, 1
	freiChenX xmm2, xmm3, xmm4, 1
	freiChenX xmm3, xmm4, xmm5, 1


	add	esi, 2
	add	edi, 2

%%noProcesaSX:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 4		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSX_y		

%%preProcesaY:

	mov	eax, YORDER
	cmp	eax, 0
	jne	%%procesaY	
	jmp	%%fin


%%procesaY:
	xor	edx, edx
	mov	eax, SRC
	mov	eax, [eax + WIDTH_STEP]
	mov	ebx, STEP_Y
	div	ebx
	mov	REMAINDER, edx		;consigo el resto del ancho respecto de 6

	mov	edi, SRC		;edi <-- *SRC
	mov	edi, [edi + IMAGE_DATA]

	mov	edx, SRC
	mov	edx, [edx + WIDTH_STEP]
	
	mov	esi, DST		;esi <-- *DST
	mov	esi, [esi + IMAGE_DATA]
	inc 	esi
	add	esi, edx		;esi apunta a la segunda fila segunda columna

	mov	ebx, HEIGHT		;va a ser mi variable de altura

%%cicloSY_y:
	xor	ecx, ecx
%%cicloSY_x:
	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
		
	mov	eax, esi

	;******************************
	; PROCESO LAS LINEAS QUE CARGUE
	;******************************
	freiChenY xmm2, xmm0
	freiChenY xmm3, xmm1
	freiChenY xmm4, xmm2

	add 	esi, STEP_Y		
	add	edi, STEP_Y
	add	ecx, STEP_Y

	cmp	ecx, edx
	jl	%%cicloSY_x

	cmp	ebx, 3
	jg	%%procesaSY
	jmp	%%noProcesaSY
%%procesaSY:


	;******************************
	; PROCESO EL RESTO DE
	; LAS LINEAS QUE CARGUE
	;******************************

	sub	esi, 2
	sub	edi, 2

	xor	eax, eax		;offset de linea

	movdqu	xmm0, [edi]		;cargo las seis lineas correspondientes
	add	eax, edx		;salto una linea
	movdqu	xmm1, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm2, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm3, [edi + eax]		
	add	eax, edx		;salto una linea
	movdqu	xmm4, [edi + eax]		
		
	mov	eax, esi

	freiChenY xmm2, xmm0
	freiChenY xmm3, xmm1
	freiChenY xmm4, xmm2

	add	esi, 2
	add	edi, 2

%%noProcesaSY:
	mov	eax, REMAINDER

	sub	esi, eax
	sub	edi, eax

	mov	eax, edx
	add	eax, edx
	add	esi, eax
	add	edi, eax	;esi debiera apuntar a la segunda columna de la fila
				;cuatro lugares mas abajo de la primera fila anterior
	sub	ebx, 3		;aca debo ver si me pase del area de la imagen y sino saltar
	cmp	ebx, 0
	jge	%%cicloSY_y		

%%fin:
	doLeave RESERVED_BYTES, 1
%endmacro